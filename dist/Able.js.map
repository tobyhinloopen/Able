{"version":3,"file":"Able.js","sourceRoot":"/","sources":["Able.ts"],"names":[],"mappings":"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","sourcesContent":["export type AbleAbilities = string[];\nexport interface IAbleDefinition { [key: string]: AbleAbilities; }\nexport interface IAbleValues { [key: string]: string|string[]; }\n\nexport namespace Able {\n  export function flatten(definition: IAbleDefinition, abilities: AbleAbilities): AbleAbilities {\n    abilities = abilities.slice();\n    for (const ability of abilities) {\n      const members = definition[ability];\n      if (members) {\n        for (const member of members) {\n          if (!abilities.includes(member)) {\n            abilities.push(member);\n          }\n        }\n      }\n    }\n    return abilities;\n  }\n\n  export function extractValues(abilities: AbleAbilities): [IAbleValues, AbleAbilities] {\n    const values: IAbleValues = {};\n    const remainder: string[] = [];\n    for (const ability of abilities) {\n      if (ability[0] === \"?\") {\n        const [key, value] = ability.substr(1).split(\"=\", 2);\n        if (key[key.length - 2] === \"[\" && key[key.length - 1] === \"]\") {\n          const arrKey = key.substr(0, key.length - 2);\n          if (!(values[arrKey] instanceof Array)) {\n            values[arrKey] = [];\n          }\n          if (typeof value !== \"undefined\") {\n            (values[arrKey] as string[]).push(value);\n          }\n        } else {\n          values[key] = typeof value === \"undefined\" ? \"\" : value;\n        }\n      } else {\n        remainder.push(ability);\n      }\n    }\n    return [values, remainder];\n  }\n\n  export function applyValues(abilities: AbleAbilities, values: IAbleValues): AbleAbilities {\n    const REGEX = /\\{([^}]+)\\}/g;\n    return abilities.reduce((outerAbilitiesAcc, ability) => {\n      const match = ability.match(REGEX);\n      if (!match) {\n        return outerAbilitiesAcc.concat([ability]);\n      }\n      return outerAbilitiesAcc.concat(match\n        .map((k) => k.substr(1, k.length - 2))\n        .reduce((abilitiesAcc, k) =>\n          abilitiesAcc.reduce((acc, innerAbility) =>\n            acc.concat(arr(values[k]).map((v) => innerAbility.replace(`{${k}}`, v))), [] as string[]), [ability]));\n    }, [] as string[]);\n  }\n\n  export function resolve(definition: IAbleDefinition, abilities: AbleAbilities): AbleAbilities {\n    const flattened = Able.flatten(definition, abilities);\n    const [extractedValues, extractedAbilities] = Able.extractValues(flattened);\n    return Able.applyValues(extractedAbilities, extractedValues);\n  }\n\n  export function getMissingAbilities(abilities: AbleAbilities, requiredAbilities: AbleAbilities): AbleAbilities {\n    return requiredAbilities.filter((ability) => !abilities.includes(ability));\n  }\n\n  export function canAccess(appliedAbilities: AbleAbilities, requiredAbilities: AbleAbilities): boolean {\n    return this.getMissingAbilities(appliedAbilities, requiredAbilities).length === 0;\n  }\n}\n\nfunction arr(valueOrValues?: string|string[]|null): string[] {\n  if (valueOrValues === \"\") {\n    return [\"\"];\n  } else if (typeof valueOrValues === \"undefined\" || valueOrValues === null) {\n    return [];\n  } else if (typeof valueOrValues === \"string\") {\n    return [valueOrValues];\n  } else {\n    return valueOrValues;\n  }\n}\n"]}